 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=42666
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 628) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-02-21 01:55:11 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=44436
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=55664
gitpod LOG:  connection authorized: user=gitpod database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
gitpod FATAL:  role "gitpod" does not exist
[unknown] LOG:  connection received: host=127.0.0.1 port=38356
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: create database students;
[unknown] LOG:  connection received: host=::1 port=34150
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='students';
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(datname) FROM pg_catalog.pg_database  WHERE substring(pg_catalog.quote_ident(datname),1,2)='st'
	LIMIT 1000
[unknown] LOG:  connection received: host=127.0.0.1 port=58618
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: create table students();
[unknown] LOG:  connection received: host=::1 port=38324
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name='students'
freecodecamp LOG:  statement: create table majors();
[unknown] LOG:  connection received: host=::1 port=38330
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name='majors'
freecodecamp LOG:  statement: create table courses();
[unknown] LOG:  connection received: host=::1 port=47044
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name='courses'
freecodecamp LOG:  statement: create table majors_courses();
[unknown] LOG:  connection received: host=::1 port=42734
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name='majors_courses'
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: alter table students add column student_id serial primary key;
[unknown] LOG:  connection received: host=::1 port=50356
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name='students' AND column_name='student_id'
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'students' AND c.column_name = 'student_id'
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,3)='sut' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,3)='sut' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,3) = substring('sut',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,3)='sut' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,3) = substring('sut',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,3) = substring('sut',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	UNION SELECT 'ALL IN TABLESPACE'
	LIMIT 1000
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,2)='st' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,2)='st' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,2) = substring('st',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,2)='st' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,2) = substring('st',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,2) = substring('st',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	UNION SELECT 'ALL IN TABLESPACE'
	LIMIT 1000
freecodecamp LOG:  statement: alter table students add column first_name varchar(50) not null;
[unknown] LOG:  connection received: host=::1 port=47940
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='students' AND column_name='first_name' AND data_type='character varying' AND character_maximum_length=50 AND is_nullable='NO'
freecodecamp LOG:  statement: alter table students add column last_name varchar(50) not null;
[unknown] LOG:  connection received: host=::1 port=57872
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='students' AND column_name='last_name' AND data_type='character varying' AND character_maximum_length=50 AND is_nullable='NO'
freecodecamp LOG:  statement: alter table students add column major_id int;
[unknown] LOG:  connection received: host=::1 port=44800
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='students' AND column_name='major_id' AND data_type='integer'
freecodecamp LOG:  statement: alter table students add column gpa numeric(2,1);
[unknown] LOG:  connection received: host=::1 port=57750
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='students' AND column_name='gpa' AND data_type='numeric' AND numeric_precision=2 AND numeric_scale=1
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(stude)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,3)='stu' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,3)='stu' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,3) = substring('stu',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,3)='stu' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,3) = substring('stu',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,3) = substring('stu',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(students)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: alter table majors add column major_id serial primary key;
[unknown] LOG:  connection received: host=::1 port=45434
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name='majors' AND column_name='major_id'
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'majors' AND c.column_name = 'major_id'
freecodecamp LOG:  statement: alter table majors add column major varchar(50) not null;
[unknown] LOG:  connection received: host=::1 port=52084
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='majors' AND column_name='major' AND data_type='character varying' AND character_maximum_length=50 AND is_nullable='NO'
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16389';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16389' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16389' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16389' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16389'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16389'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16389')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16389' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16389' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: alter table students add foreign key(major_id) references majors(major_id);
[unknown] LOG:  connection received: host=::1 port=56050
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY'
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,5)='stude' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,5)='stude' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('stude',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,5)='stude' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,5) = substring('stude',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('stude',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(students)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16386' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16386')
	                     UNION ALL VALUES ('16386'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16386' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: alter table courses add column course_id serial primary key;
[unknown] LOG:  connection received: host=::1 port=45420
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name='courses' AND column_name='course_id' AND data_type='integer'
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type='PRIMARY KEY' AND t.table_name='courses' AND c.column_name='course_id'
freecodecamp ERROR:  syntax error at or near "set" at character 53
freecodecamp STATEMENT:  alter table courses add column courses varchar(100) set not null;
freecodecamp LOG:  statement: alter table courses add column courses varchar(100) not null;
[unknown] LOG:  connection received: host=::1 port=38172
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='courses' AND column_name='course' AND data_type='character varying' AND character_maximum_length=100 AND is_nullable='NO'
[unknown] LOG:  connection received: host=::1 port=38186
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='courses' AND column_name='course' AND data_type='character varying' AND character_maximum_length=100 AND is_nullable='NO'
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(attname)   FROM pg_catalog.pg_attribute a, pg_catalog.pg_class c  WHERE c.oid = a.attrelid    AND a.attnum > 0    AND NOT a.attisdropped    AND substring(pg_catalog.quote_ident(attname),1,4)='cour'    AND (pg_catalog.quote_ident(relname)='courses'         OR '"' || relname || '"'='courses')    AND pg_catalog.pg_table_is_visible(c.oid)
	LIMIT 1000
freecodecamp LOG:  statement: alter table courses rename column courses to course;
[unknown] LOG:  connection received: host=::1 port=59190
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'public' AND table_name='courses' AND column_name='course' AND data_type='character varying' AND character_maximum_length=100 AND is_nullable='NO'
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: alter table majors_courses add column major_id itn;
freecodecamp ERROR:  type "itn" does not exist at character 48
freecodecamp STATEMENT:  alter table majors_courses add column major_id itn;
freecodecamp LOG:  statement: alter table majors_courses add column major_id int;
[unknown] LOG:  connection received: host=::1 port=48660
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name='majors_courses' AND column_name='major_id' AND data_type='integer'
freecodecamp LOG:  statement: alter table majors_courses add foreign key(major_id) references majors(major_id);
[unknown] LOG:  connection received: host=::1 port=54566
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY'
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,9)='majors_co' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,9)='majors_co' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,9) = substring('majors_co',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,9)='majors_co' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,9) = substring('majors_co',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,9) = substring('majors_co',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	UNION SELECT 'ALL IN TABLESPACE'
	LIMIT 1000
freecodecamp LOG:  statement: alter table majors_courses add column course_id int;
[unknown] LOG:  connection received: host=::1 port=41066
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name='majors_courses' AND column_name='course_id' AND data_type='integer'
freecodecamp ERROR:  syntax error at or near "reference" at character 55
freecodecamp STATEMENT:  alter table majors_courses add foreign key(course_id) reference majors(course_id);
freecodecamp LOG:  statement: alter table majors_courses add foreign key(course_id) references majors(course_id);
freecodecamp ERROR:  column "course_id" referenced in foreign key constraint does not exist
freecodecamp STATEMENT:  alter table majors_courses add foreign key(course_id) references majors(course_id);
freecodecamp LOG:  statement: alter table majors_courses add foreign key(course_id) references courses(course_id);
[unknown] LOG:  connection received: host=::1 port=33332
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY'
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,6)='majors' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,6)='majors' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,6)='majors' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors_courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16395';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16395' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16395' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16395')
	                     UNION ALL VALUES ('16395'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16395' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16395'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16395'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16395')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16395' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16395' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16395' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,5)='major' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,5)='major' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,5)='major' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	UNION SELECT 'ALL IN TABLESPACE'
	LIMIT 1000
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,7)='majors_' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,7)='majors_' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,7)='majors_' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	UNION SELECT 'ALL IN TABLESPACE'
	LIMIT 1000
freecodecamp LOG:  statement: alter table majors_courses add primary key(major_id, course_id);
[unknown] LOG:  connection received: host=::1 port=33366
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type='PRIMARY KEY' AND t.table_name='majors_courses' AND c.column_name='major_id'
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type='PRIMARY KEY' AND t.table_name='majors_courses' AND c.column_name='course_id'
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,5)='major' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,5)='major' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,5)='major' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors_courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16395';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16395' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16395' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16395' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16395')
	                     UNION ALL VALUES ('16395'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16395' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16395'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16395'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16395')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16395' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16395' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16395' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16389';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16389' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16389' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16389' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16389')
	                     UNION ALL VALUES ('16389'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16389' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16389'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16389'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16389')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16389' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16389' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16389' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: insert into majors(major) values('Database Administration');
[unknown] LOG:  connection received: host=::1 port=36880
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM majors WHERE major='Database Administration'
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=56442
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM courses WHERE course='Data Structures and Algorithms'
freecodecamp LOG:  statement: insert into courses(course) values('Data Structures and Algorithms');
[unknown] LOG:  connection received: host=::1 port=56382
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM courses WHERE course='Data Structures and Algorithms'
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,4)='cour' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,4)='cour' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,4) = substring('cour',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,4)='cour' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,4) = substring('cour',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,4) = substring('cour',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: select * from courses;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors_courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16395';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16395' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16395' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16395' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16395')
	                     UNION ALL VALUES ('16395'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16395' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16395'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16395'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16395')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16395' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16395' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16395' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,5)='major' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,5)='major' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,5)='major' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,5) = substring('major',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,6)='majors' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,6)='majors' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,6)='majors' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,6) = substring('majors',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,7)='majors_' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,7)='majors_' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'f', 'v', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,7)='majors_' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: insert into majors_courses(major_id, course_id) values('Database Administration', 'Data Structures and Algoritms')
	;
freecodecamp ERROR:  invalid input syntax for type integer: "Database Administration" at character 56
freecodecamp STATEMENT:  insert into majors_courses(major_id, course_id) values('Database Administration', 'Data Structures and Algoritms')
	;
freecodecamp LOG:  statement: insert into majors_courses(major_id, course_id) values('Database Administration', 'Data Structures and Algoritms')
	;
freecodecamp ERROR:  invalid input syntax for type integer: "Database Administration" at character 56
freecodecamp STATEMENT:  insert into majors_courses(major_id, course_id) values('Database Administration', 'Data Structures and Algoritms')
	;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,7)='majors_' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,7)='majors_' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,7)='majors_' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE substring(pg_catalog.quote_ident(c.relname),1,7)='majors_' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,7)='majors_' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,7)='majors_' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,7) = substring('majors_',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors_courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16395';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16395' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16395' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16395' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16395')
	                     UNION ALL VALUES ('16395'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16395' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16395'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16395'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16395')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16395' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16395' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16395' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=53602
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM majors_courses
freecodecamp LOG:  statement: select * from majors;
[unknown] LOG:  connection received: host=::1 port=55228
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM majors_courses
freecodecamp LOG:  statement: select * from courses;
[unknown] LOG:  connection received: host=::1 port=50968
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM majors_courses
freecodecamp LOG:  statement: insert into majors_courses(major_id, course_id) values(1,1)
	;
[unknown] LOG:  connection received: host=::1 port=34516
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM majors_courses
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,10)='majors_cou' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,10)='majors_cou' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,10) = substring('majors_cou',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,10)='majors_cou' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,10) = substring('majors_cou',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,10) = substring('majors_cou',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: select * from majors_courses ;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(students)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16386' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16386')
	                     UNION ALL VALUES ('16386'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16386' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: insert into students(first_name, last_name, major_id, gpa) values('Rhea', 'Kellems', 1, 2.5);
[unknown] LOG:  connection received: host=::1 port=60452
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT * FROM students WHERE first_name='Rhea' AND last_name='Kellems' AND gpa=2.5 AND major_id IS NOT NULL
freecodecamp LOG:  statement: select * from students;
[unknown] LOG:  connection received: host=127.0.0.1 port=37732
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='major'
[unknown] LOG:  connection received: host=127.0.0.1 port=37746
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37748
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=37760
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37774
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=37778
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=37782
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37786
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=37802
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=37816
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=37830
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37844
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=37856
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=37860
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=37870
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37878
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=37880
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=37894
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=37896
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=37908
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=37922
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37932
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=37944
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37958
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=37962
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=37978
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=37986
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=38000
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=38002
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(majors)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16389';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16389' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16389' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16389' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16389')
	                     UNION ALL VALUES ('16389'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16389' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16389'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16389'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16389')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16389' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16389' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16389' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 935) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-02-21 04:31:45 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=46386
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=46400
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS students;
postgres LOG:  statement: CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE students OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=46412
postgres LOG:  connection authorized: user=postgres database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.courses (
	    course_id integer NOT NULL,
	    course character varying(100) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.courses_course_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;
postgres LOG:  statement: CREATE TABLE public.majors (
	    major_id integer NOT NULL,
	    major character varying(50) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors OWNER TO freecodecamp;
postgres LOG:  statement: CREATE TABLE public.majors_courses (
	    major_id integer NOT NULL,
	    course_id integer NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors_courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.majors_major_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;
postgres LOG:  statement: CREATE TABLE public.students (
	    student_id integer NOT NULL,
	    first_name character varying(50) NOT NULL,
	    last_name character varying(50) NOT NULL,
	    major_id integer,
	    gpa numeric(2,1)
	);
postgres LOG:  statement: ALTER TABLE public.students OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.students_student_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;
postgres LOG:  statement: ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.courses VALUES (1, 'Data Structures and Algorithms');
postgres LOG:  statement: INSERT INTO public.majors VALUES (1, 'Database Administration');
postgres LOG:  statement: INSERT INTO public.majors_courses VALUES (1, 1);
postgres LOG:  statement: INSERT INTO public.students VALUES (1, 'Rhea', 'Kellems', 1, 2.5);
postgres LOG:  statement: SELECT pg_catalog.setval('public.courses_course_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.majors_major_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.students_student_id_seq', 1, true);
postgres LOG:  statement: ALTER TABLE ONLY public.courses
	    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors
	    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
[unknown] LOG:  connection received: host=::1 port=57948
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=127.0.0.1 port=46282
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='major'
[unknown] LOG:  connection received: host=127.0.0.1 port=46286
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('major')
[unknown] LOG:  connection received: host=127.0.0.1 port=46290
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46302
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=46318
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=46322
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46324
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=46334
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=::1 port=38998
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=127.0.0.1 port=48076
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: truncate majors;
freecodecamp ERROR:  cannot truncate a table referenced in a foreign key constraint
freecodecamp DETAIL:  Table "majors_courses" references "majors".
freecodecamp HINT:  Truncate table "majors_courses" at the same time, or use TRUNCATE ... CASCADE.
freecodecamp STATEMENT:  truncate majors;
freecodecamp LOG:  statement: truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "majors_courses"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "students"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp LOG:  statement: select * from majors
	;
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c WHERE c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(c.relname),1,8)='majors_c' AND pg_catalog.pg_table_is_visible(c.oid) AND c.relnamespace <> (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' FROM pg_catalog.pg_namespace n WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,8)='majors_c' AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,8) = substring('majors_c',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) > 1
	UNION
	SELECT pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n WHERE c.relnamespace = n.oid AND c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') AND substring(pg_catalog.quote_ident(n.nspname) || '.' || pg_catalog.quote_ident(c.relname),1,8)='majors_c' AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,8) = substring('majors_c',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1) AND (SELECT pg_catalog.count(*) FROM pg_catalog.pg_namespace WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,8) = substring('majors_c',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1
	LIMIT 1000
freecodecamp LOG:  statement: select * from majors_courses ;
freecodecamp LOG:  statement: select * from students;
freecodecamp LOG:  statement: select * from courses;
freecodecamp LOG:  statement: truncate courses;
freecodecamp ERROR:  cannot truncate a table referenced in a foreign key constraint
freecodecamp DETAIL:  Table "majors_courses" references "courses".
freecodecamp HINT:  Truncate table "majors_courses" at the same time, or use TRUNCATE ... CASCADE.
freecodecamp STATEMENT:  truncate courses;
freecodecamp LOG:  statement: truncate courses cascade;
freecodecamp NOTICE:  truncate cascades to table "majors_courses"
freecodecamp STATEMENT:  truncate courses cascade;
freecodecamp LOG:  statement: select * from courses;
[unknown] LOG:  connection received: host=::1 port=57868
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=127.0.0.1 port=55972
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='major'
[unknown] LOG:  connection received: host=127.0.0.1 port=55978
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('major')
[unknown] LOG:  connection received: host=127.0.0.1 port=55988
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=56002
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=56018
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=56020
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=56032
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=56036
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=56046
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=::1 port=57880
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: truncate majors;
freecodecamp ERROR:  cannot truncate a table referenced in a foreign key constraint
freecodecamp DETAIL:  Table "majors_courses" references "majors".
freecodecamp HINT:  Truncate table "majors_courses" at the same time, or use TRUNCATE ... CASCADE.
freecodecamp STATEMENT:  truncate majors;
freecodecamp LOG:  statement: truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "majors_courses"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "students"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp LOG:  statement: select * from majors;
[unknown] LOG:  connection received: host=::1 port=60130
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=127.0.0.1 port=46362
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46370
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=46384
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=46398
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=46414
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46416
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=46428
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=::1 port=44348
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
freecodecamp LOG:  statement: select * from majors;
[unknown] LOG:  connection received: host=127.0.0.1 port=41752
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=41768
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=41780
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=41782
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
 LOG:  received smart shutdown request
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 24343) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=54468
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=127.0.0.1 port=54472
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS students;
postgres NOTICE:  database "students" does not exist, skipping
postgres STATEMENT:  DROP DATABASE IF EXISTS students;
postgres LOG:  statement: CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE students OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=54474
postgres LOG:  connection authorized: user=postgres database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.courses (
	    course_id integer NOT NULL,
	    course character varying(100) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.courses_course_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;
postgres LOG:  statement: CREATE TABLE public.majors (
	    major_id integer NOT NULL,
	    major character varying(50) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors OWNER TO freecodecamp;
postgres LOG:  statement: CREATE TABLE public.majors_courses (
	    major_id integer NOT NULL,
	    course_id integer NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors_courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.majors_major_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;
postgres LOG:  statement: CREATE TABLE public.students (
	    student_id integer NOT NULL,
	    first_name character varying(50) NOT NULL,
	    last_name character varying(50) NOT NULL,
	    major_id integer,
	    gpa numeric(2,1)
	);
postgres LOG:  statement: ALTER TABLE public.students OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.students_student_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;
postgres LOG:  statement: ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.majors VALUES (9, 'Database Administration');
postgres LOG:  statement: INSERT INTO public.majors VALUES (10, 'Web Development');
postgres LOG:  statement: INSERT INTO public.majors VALUES (11, 'Data Science');
postgres LOG:  statement: SELECT pg_catalog.setval('public.courses_course_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.majors_major_id_seq', 11, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.students_student_id_seq', 1, true);
postgres LOG:  statement: ALTER TABLE ONLY public.courses
	    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors
	    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 722) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-02-21 23:23:30 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=50536
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=50552
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS students;
postgres LOG:  statement: CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE students OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=50558
postgres LOG:  connection authorized: user=postgres database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.courses (
	    course_id integer NOT NULL,
	    course character varying(100) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.courses_course_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;
postgres LOG:  statement: CREATE TABLE public.majors (
	    major_id integer NOT NULL,
	    major character varying(50) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors OWNER TO freecodecamp;
postgres LOG:  statement: CREATE TABLE public.majors_courses (
	    major_id integer NOT NULL,
	    course_id integer NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors_courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.majors_major_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;
postgres LOG:  statement: CREATE TABLE public.students (
	    student_id integer NOT NULL,
	    first_name character varying(50) NOT NULL,
	    last_name character varying(50) NOT NULL,
	    major_id integer,
	    gpa numeric(2,1)
	);
postgres LOG:  statement: ALTER TABLE public.students OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.students_student_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;
postgres LOG:  statement: ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.majors VALUES (9, 'Database Administration');
postgres LOG:  statement: INSERT INTO public.majors VALUES (10, 'Web Development');
postgres LOG:  statement: INSERT INTO public.majors VALUES (11, 'Data Science');
postgres LOG:  statement: SELECT pg_catalog.setval('public.courses_course_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.majors_major_id_seq', 11, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.students_student_id_seq', 1, true);
postgres LOG:  statement: ALTER TABLE ONLY public.courses
	    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors
	    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 997) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-02-21 23:31:01 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=33470
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=33472
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS students;
postgres LOG:  statement: CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE students OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=33486
postgres LOG:  connection authorized: user=postgres database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.courses (
	    course_id integer NOT NULL,
	    course character varying(100) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.courses_course_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;
postgres LOG:  statement: CREATE TABLE public.majors (
	    major_id integer NOT NULL,
	    major character varying(50) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors OWNER TO freecodecamp;
postgres LOG:  statement: CREATE TABLE public.majors_courses (
	    major_id integer NOT NULL,
	    course_id integer NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors_courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.majors_major_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;
postgres LOG:  statement: CREATE TABLE public.students (
	    student_id integer NOT NULL,
	    first_name character varying(50) NOT NULL,
	    last_name character varying(50) NOT NULL,
	    major_id integer,
	    gpa numeric(2,1)
	);
postgres LOG:  statement: ALTER TABLE public.students OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.students_student_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;
postgres LOG:  statement: ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.majors VALUES (9, 'Database Administration');
postgres LOG:  statement: INSERT INTO public.majors VALUES (10, 'Web Development');
postgres LOG:  statement: INSERT INTO public.majors VALUES (11, 'Data Science');
postgres LOG:  statement: SELECT pg_catalog.setval('public.courses_course_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.majors_major_id_seq', 11, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.students_student_id_seq', 1, true);
postgres LOG:  statement: ALTER TABLE ONLY public.courses
	    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors
	    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 2105) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-02-21 23:31:43 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=60204
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=60218
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS students;
postgres LOG:  statement: CREATE DATABASE students WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE students OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=60232
postgres LOG:  connection authorized: user=postgres database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.courses (
	    course_id integer NOT NULL,
	    course character varying(100) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.courses_course_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.courses_course_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.courses_course_id_seq OWNED BY public.courses.course_id;
postgres LOG:  statement: CREATE TABLE public.majors (
	    major_id integer NOT NULL,
	    major character varying(50) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors OWNER TO freecodecamp;
postgres LOG:  statement: CREATE TABLE public.majors_courses (
	    major_id integer NOT NULL,
	    course_id integer NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.majors_courses OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.majors_major_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.majors_major_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.majors_major_id_seq OWNED BY public.majors.major_id;
postgres LOG:  statement: CREATE TABLE public.students (
	    student_id integer NOT NULL,
	    first_name character varying(50) NOT NULL,
	    last_name character varying(50) NOT NULL,
	    major_id integer,
	    gpa numeric(2,1)
	);
postgres LOG:  statement: ALTER TABLE public.students OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.students_student_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.students_student_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.students_student_id_seq OWNED BY public.students.student_id;
postgres LOG:  statement: ALTER TABLE ONLY public.courses ALTER COLUMN course_id SET DEFAULT nextval('public.courses_course_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.majors ALTER COLUMN major_id SET DEFAULT nextval('public.majors_major_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.students ALTER COLUMN student_id SET DEFAULT nextval('public.students_student_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.majors VALUES (9, 'Database Administration');
postgres LOG:  statement: INSERT INTO public.majors VALUES (10, 'Web Development');
postgres LOG:  statement: INSERT INTO public.majors VALUES (11, 'Data Science');
postgres LOG:  statement: SELECT pg_catalog.setval('public.courses_course_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.majors_major_id_seq', 11, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.students_student_id_seq', 1, true);
postgres LOG:  statement: ALTER TABLE ONLY public.courses
	    ADD CONSTRAINT courses_pkey PRIMARY KEY (course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_pkey PRIMARY KEY (major_id, course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors
	    ADD CONSTRAINT majors_pkey PRIMARY KEY (major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_pkey PRIMARY KEY (student_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(course_id);
postgres LOG:  statement: ALTER TABLE ONLY public.majors_courses
	    ADD CONSTRAINT majors_courses_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
postgres LOG:  statement: ALTER TABLE ONLY public.students
	    ADD CONSTRAINT students_major_id_fkey FOREIGN KEY (major_id) REFERENCES public.majors(major_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=39138
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT pg_catalog.quote_ident(datname) FROM pg_catalog.pg_database  WHERE substring(pg_catalog.quote_ident(datname),1,2)='st'
	LIMIT 1000
[unknown] LOG:  connection received: host=127.0.0.1 port=39140
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "l" at character 25
freecodecamp STATEMENT:  truncate majors cascade
	l
	;
freecodecamp LOG:  statement: truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "majors_courses"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "students"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp LOG:  statement: select * from majors;
[unknown] LOG:  connection received: host=::1 port=37478
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=::1 port=53980
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
[unknown] LOG:  connection received: host=127.0.0.1 port=34140
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=34146
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=34154
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=34162
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=34172
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=34184
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=34194
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=::1 port=53982
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
freecodecamp LOG:  statement: select * from courses
	;
freecodecamp LOG:  statement: select * from majors_courses;
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(courses)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16521';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16521' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16521' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16521' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16521')
	                     UNION ALL VALUES ('16521'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16521' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16521'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16521'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16521')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16521' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16521' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16521' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: truncate majors;
freecodecamp ERROR:  cannot truncate a table referenced in a foreign key constraint
freecodecamp DETAIL:  Table "majors_courses" references "majors".
freecodecamp HINT:  Truncate table "majors_courses" at the same time, or use TRUNCATE ... CASCADE.
freecodecamp STATEMENT:  truncate majors;
freecodecamp LOG:  statement: truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "majors_courses"
freecodecamp STATEMENT:  truncate majors cascade;
freecodecamp NOTICE:  truncate cascades to table "students"
freecodecamp STATEMENT:  truncate majors cascade;
[unknown] LOG:  connection received: host=::1 port=37756
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
[unknown] LOG:  connection received: host=127.0.0.1 port=48944
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=48956
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=48968
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=48978
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=48992
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=48994
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=49008
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=49016
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=49026
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=49032
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=49046
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=49056
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=49066
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=49074
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=49076
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=49092
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=49106
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=::1 port=37758
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
freecodecamp LOG:  statement: select * from courses;
[unknown] LOG:  connection received: host=::1 port=46108
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
[unknown] LOG:  connection received: host=127.0.0.1 port=32900
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=32908
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=32924
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=32926
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=32930
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=32938
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=32944
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=32948
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=32960
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=32962
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=32976
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=32982
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=32998
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=33004
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=33012
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=33022
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=33028
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=33034
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=::1 port=46118
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
[unknown] LOG:  connection received: host=::1 port=36452
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=55480
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=55488
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=55498
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=55506
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=55510
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=55514
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=55522
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=55530
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES('', '')
freecodecamp ERROR:  invalid input syntax for type integer: "" at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES('', '')
[unknown] LOG:  connection received: host=127.0.0.1 port=55544
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=55554
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=55570
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=55578
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=55592
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=55604
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=55606
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES('', '')
freecodecamp ERROR:  invalid input syntax for type integer: "" at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES('', '')
[unknown] LOG:  connection received: host=127.0.0.1 port=55614
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=55620
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=55624
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=55632
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=55648
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES('21', '')
freecodecamp ERROR:  invalid input syntax for type integer: "" at character 62
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES('21', '')
[unknown] LOG:  connection received: host=127.0.0.1 port=55658
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=55670
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=55674
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=55686
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=55694
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES('', '8')
freecodecamp ERROR:  invalid input syntax for type integer: "" at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES('', '8')
[unknown] LOG:  connection received: host=::1 port=36462
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=57342
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=47492
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=47498
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=47502
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=47510
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=47520
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=47526
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=47538
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=47542
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, )
[unknown] LOG:  connection received: host=127.0.0.1 port=47546
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=47560
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=47576
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=47580
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=47584
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=47596
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=47598
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, )
[unknown] LOG:  connection received: host=127.0.0.1 port=47610
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=47618
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=47622
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=47632
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=47634
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near ")" at character 60
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(24, )
[unknown] LOG:  connection received: host=127.0.0.1 port=47642
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=47650
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=47656
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=47660
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=47664
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, 11)
[unknown] LOG:  connection received: host=::1 port=57348
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=41720
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=46522
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=46532
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=46070
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=46086
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46092
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=46108
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46122
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=46134
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=46138
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=46148
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, )
[unknown] LOG:  connection received: host=127.0.0.1 port=46164
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=46168
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=46184
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=46186
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=46194
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=46198
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=46214
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, )
[unknown] LOG:  connection received: host=127.0.0.1 port=46230
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=46232
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=46240
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=46252
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=46266
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near ")" at character 60
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(27, )
[unknown] LOG:  connection received: host=127.0.0.1 port=46280
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=46286
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=46290
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=46302
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=46306
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "," at character 56
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(, 14)
[unknown] LOG:  connection received: host=::1 port=46538
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=39744
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=38804
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=38808
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=38818
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=38834
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=38838
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=38840
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=38854
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=38870
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near ")" at character 60
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(30, )
[unknown] LOG:  connection received: host=127.0.0.1 port=38886
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=38896
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=38898
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=38902
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=38908
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=38924
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=38940
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near ")" at character 60
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(31, )
[unknown] LOG:  connection received: host=127.0.0.1 port=38952
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=38960
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=38974
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=38986
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=38994
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near ")" at character 60
freecodecamp STATEMENT:  INSERT INTO majors_courses(major_id, course_id) VALUES(30, )
[unknown] LOG:  connection received: host=127.0.0.1 port=39010
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=39014
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=39028
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=39040
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=39052
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(32, 17)
[unknown] LOG:  connection received: host=::1 port=47442
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=38396
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=59172
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=59188
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=59192
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=59208
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=59216
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=59224
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=59228
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=59230
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(33, 20)
[unknown] LOG:  connection received: host=127.0.0.1 port=59240
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=59250
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=59258
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=59274
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=59286
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=59292
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=59294
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(34, 21)
[unknown] LOG:  connection received: host=127.0.0.1 port=59296
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=59312
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=59316
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=59328
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=59338
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(33, 22)
[unknown] LOG:  connection received: host=127.0.0.1 port=59352
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=59366
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=59374
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=59376
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=59382
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(35, 20)
[unknown] LOG:  connection received: host=::1 port=38398
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=44350
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=44362
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=44364
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=44366
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=44368
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=44370
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=44380
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=44396
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(36, 23)
[unknown] LOG:  connection received: host=127.0.0.1 port=44406
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=44416
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=44424
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=44426
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=44438
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=44454
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=44462
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(37, 24)
[unknown] LOG:  connection received: host=127.0.0.1 port=44468
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=44478
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=44490
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=44500
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=44502
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(36, 25)
[unknown] LOG:  connection received: host=127.0.0.1 port=44518
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=44520
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=44526
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=44534
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=44540
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(38, 23)
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: select * from courses;
freecodecamp LOG:  statement: select * from majors_courses;
[unknown] LOG:  connection received: host=::1 port=52334
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=32912
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=53134
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=53140
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=53144
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=53156
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=53158
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=53172
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=53182
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(39, 26)
[unknown] LOG:  connection received: host=127.0.0.1 port=53186
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=53196
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=53200
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=53206
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=53222
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=53236
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=53246
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(40, 27)
[unknown] LOG:  connection received: host=127.0.0.1 port=53250
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=53252
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=53256
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=53264
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=53268
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(39, 28)
[unknown] LOG:  connection received: host=127.0.0.1 port=53272
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=53276
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=53278
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=53294
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=53304
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(41, 26)
[unknown] LOG:  connection received: host=::1 port=41968
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=58100
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=42746
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=42758
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=42770
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=42784
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=42790
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=42800
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=42802
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=42804
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(42, 29)
[unknown] LOG:  connection received: host=127.0.0.1 port=42818
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=42822
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=42826
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=42834
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=42850
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=42852
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=42868
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(43, 30)
[unknown] LOG:  connection received: host=127.0.0.1 port=42878
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=42894
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=42902
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=42906
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=42918
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(42, 31)
[unknown] LOG:  connection received: host=127.0.0.1 port=42932
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=42940
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=42942
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=42952
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=42966
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(44, 29)
[unknown] LOG:  connection received: host=127.0.0.1 port=42982
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=42986
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=42998
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=43002
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=::1 port=58102
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=::1 port=53488
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=35578
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=35584
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35594
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=35598
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35610
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35618
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=35634
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35650
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(45, 32)
[unknown] LOG:  connection received: host=127.0.0.1 port=35658
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35674
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=35678
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35682
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35684
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=35688
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35690
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(46, 33)
[unknown] LOG:  connection received: host=127.0.0.1 port=35702
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35714
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35722
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=35730
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35732
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(45, 34)
[unknown] LOG:  connection received: host=127.0.0.1 port=35744
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=35756
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=35758
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=35760
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35772
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(47, 32)
[unknown] LOG:  connection received: host=127.0.0.1 port=35784
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35798
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=35814
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35830
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=::1 port=53498
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
freecodecamp LOG:  statement: select * from students;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(students)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16534';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16534' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16534' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16534' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16534')
	                     UNION ALL VALUES ('16534'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16534' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16534'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16534'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16534')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16534' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16534' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16534' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=50638
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
postgres LOG:  statement: SELECT student_id FROM students
[unknown] LOG:  connection received: host=127.0.0.1 port=43314
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=43326
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=43336
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=43344
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=43360
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=43374
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=43378
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=43386
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(48, 35)
[unknown] LOG:  connection received: host=127.0.0.1 port=43394
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=43406
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=43410
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=43416
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=43424
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=43440
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=43454
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(49, 36)
[unknown] LOG:  connection received: host=127.0.0.1 port=43466
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=43478
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=43482
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=43496
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=43506
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(48, 37)
[unknown] LOG:  connection received: host=127.0.0.1 port=43516
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=43522
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=43538
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=43554
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=43568
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(50, 35)
[unknown] LOG:  connection received: host=127.0.0.1 port=43574
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=43580
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Rhea','Kellems', 48, 2.5)
[unknown] LOG:  connection received: host=127.0.0.1 port=43590
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=43592
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Emma','Gilbert', null, null)
[unknown] LOG:  connection received: host=127.0.0.1 port=43600
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=43602
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Kimberly','Whitley', 49, 3.8)
[unknown] LOG:  connection received: host=127.0.0.1 port=43618
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=43626
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Jimmy','Felipe', 48, 3.7)
[unknown] LOG:  connection received: host=::1 port=52856
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
postgres LOG:  statement: SELECT student_id FROM students
freecodecamp LOG:  statement: select * from students;
[unknown] LOG:  connection received: host=::1 port=33820
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
postgres LOG:  statement: SELECT student_id FROM students
[unknown] LOG:  connection received: host=127.0.0.1 port=34706
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: TRUNCATE students, majors, courses, majors_courses
[unknown] LOG:  connection received: host=127.0.0.1 port=34712
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=34714
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Database Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=34720
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=34732
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=34744
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Data Structures and Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=34746
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=34758
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(51, 38)
[unknown] LOG:  connection received: host=127.0.0.1 port=34768
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=34780
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Web Development')
[unknown] LOG:  connection received: host=127.0.0.1 port=34790
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=34806
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=34808
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=34816
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=34822
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(52, 39)
[unknown] LOG:  connection received: host=127.0.0.1 port=34826
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=34842
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=34854
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Database Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=34862
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Database Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=34878
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(51, 40)
[unknown] LOG:  connection received: host=127.0.0.1 port=34886
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=34896
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Data Science')
[unknown] LOG:  connection received: host=127.0.0.1 port=34904
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=34914
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=34918
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(53, 38)
[unknown] LOG:  connection received: host=127.0.0.1 port=34926
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=34940
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Network Engineering')
[unknown] LOG:  connection received: host=127.0.0.1 port=34944
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=34950
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Networks'
[unknown] LOG:  connection received: host=127.0.0.1 port=34964
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Computer Networks')
[unknown] LOG:  connection received: host=127.0.0.1 port=34978
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Networks'
[unknown] LOG:  connection received: host=127.0.0.1 port=34982
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(54, 41)
[unknown] LOG:  connection received: host=127.0.0.1 port=34994
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35006
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='SQL'
[unknown] LOG:  connection received: host=127.0.0.1 port=35018
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('SQL')
[unknown] LOG:  connection received: host=127.0.0.1 port=35022
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='SQL'
[unknown] LOG:  connection received: host=127.0.0.1 port=35024
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(51, 42)
[unknown] LOG:  connection received: host=127.0.0.1 port=35028
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=35038
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Machine Learning'
[unknown] LOG:  connection received: host=127.0.0.1 port=35054
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Machine Learning')
[unknown] LOG:  connection received: host=127.0.0.1 port=35058
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Machine Learning'
[unknown] LOG:  connection received: host=127.0.0.1 port=35066
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(53, 43)
[unknown] LOG:  connection received: host=127.0.0.1 port=35078
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=35084
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35086
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Computer Systems')
[unknown] LOG:  connection received: host=127.0.0.1 port=35098
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35110
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(54, 44)
[unknown] LOG:  connection received: host=127.0.0.1 port=35116
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35126
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Computer Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=35128
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35144
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Networks'
[unknown] LOG:  connection received: host=127.0.0.1 port=35146
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(55, 41)
[unknown] LOG:  connection received: host=127.0.0.1 port=35160
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35166
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Applications'
[unknown] LOG:  connection received: host=127.0.0.1 port=35174
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Web Applications')
[unknown] LOG:  connection received: host=127.0.0.1 port=35190
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Applications'
[unknown] LOG:  connection received: host=127.0.0.1 port=35202
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(51, 45)
[unknown] LOG:  connection received: host=127.0.0.1 port=35218
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=35232
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('Game Design')
[unknown] LOG:  connection received: host=127.0.0.1 port=35246
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=35248
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Artificial Intelligence'
[unknown] LOG:  connection received: host=127.0.0.1 port=35258
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Artificial Intelligence')
[unknown] LOG:  connection received: host=127.0.0.1 port=35266
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Artificial Intelligence'
[unknown] LOG:  connection received: host=127.0.0.1 port=35272
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(56, 46)
[unknown] LOG:  connection received: host=127.0.0.1 port=35280
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=35282
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Python'
[unknown] LOG:  connection received: host=127.0.0.1 port=35298
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Python')
[unknown] LOG:  connection received: host=127.0.0.1 port=35310
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Python'
[unknown] LOG:  connection received: host=127.0.0.1 port=35312
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(53, 47)
[unknown] LOG:  connection received: host=127.0.0.1 port=35324
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35326
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Object-Oriented Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35328
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Object-Oriented Programming')
[unknown] LOG:  connection received: host=127.0.0.1 port=35332
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Object-Oriented Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35340
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(55, 48)
[unknown] LOG:  connection received: host=127.0.0.1 port=35348
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35354
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors(major) VALUES('System Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=35356
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35372
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35386
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(57, 44)
[unknown] LOG:  connection received: host=127.0.0.1 port=35388
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=35402
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Calculus'
[unknown] LOG:  connection received: host=127.0.0.1 port=35410
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Calculus')
[unknown] LOG:  connection received: host=127.0.0.1 port=35424
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Calculus'
[unknown] LOG:  connection received: host=127.0.0.1 port=35440
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(56, 49)
[unknown] LOG:  connection received: host=127.0.0.1 port=35448
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35452
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Data Structures and Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35456
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(52, 38)
[unknown] LOG:  connection received: host=127.0.0.1 port=35466
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=35480
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Calculus'
[unknown] LOG:  connection received: host=127.0.0.1 port=35496
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(53, 49)
[unknown] LOG:  connection received: host=127.0.0.1 port=35498
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35504
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Object-Oriented Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35514
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(52, 48)
[unknown] LOG:  connection received: host=127.0.0.1 port=35530
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=35532
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Game Architecture'
[unknown] LOG:  connection received: host=127.0.0.1 port=35544
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Game Architecture')
[unknown] LOG:  connection received: host=127.0.0.1 port=35558
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Game Architecture'
[unknown] LOG:  connection received: host=127.0.0.1 port=35566
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(56, 50)
[unknown] LOG:  connection received: host=127.0.0.1 port=35582
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35586
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Networks'
[unknown] LOG:  connection received: host=127.0.0.1 port=35594
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(57, 41)
[unknown] LOG:  connection received: host=127.0.0.1 port=35598
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=35612
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35620
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Algorithms')
[unknown] LOG:  connection received: host=127.0.0.1 port=35630
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35634
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(56, 51)
[unknown] LOG:  connection received: host=127.0.0.1 port=35650
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35666
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='UNIX'
[unknown] LOG:  connection received: host=127.0.0.1 port=35680
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('UNIX')
[unknown] LOG:  connection received: host=127.0.0.1 port=35688
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='UNIX'
[unknown] LOG:  connection received: host=127.0.0.1 port=35700
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(57, 52)
[unknown] LOG:  connection received: host=127.0.0.1 port=35716
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35720
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Server Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35722
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Server Administration')
[unknown] LOG:  connection received: host=127.0.0.1 port=35726
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Server Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35734
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(57, 53)
[unknown] LOG:  connection received: host=127.0.0.1 port=35746
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35752
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Computer Systems'
[unknown] LOG:  connection received: host=127.0.0.1 port=35754
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(55, 44)
[unknown] LOG:  connection received: host=127.0.0.1 port=35758
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Computer Programming'
[unknown] LOG:  connection received: host=127.0.0.1 port=35766
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Python'
[unknown] LOG:  connection received: host=127.0.0.1 port=35774
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(55, 47)
[unknown] LOG:  connection received: host=127.0.0.1 port=35778
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=35782
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Network Security'
[unknown] LOG:  connection received: host=127.0.0.1 port=35796
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT into courses(course) VALUES('Network Security')
[unknown] LOG:  connection received: host=127.0.0.1 port=35804
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Network Security'
[unknown] LOG:  connection received: host=127.0.0.1 port=35816
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(54, 54)
[unknown] LOG:  connection received: host=127.0.0.1 port=35830
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35846
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Web Applications'
[unknown] LOG:  connection received: host=127.0.0.1 port=35860
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(52, 45)
[unknown] LOG:  connection received: host=127.0.0.1 port=35876
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors WHERE major='Network Engineering'
[unknown] LOG:  connection received: host=127.0.0.1 port=35888
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT course_id FROM courses WHERE course='Algorithms'
[unknown] LOG:  connection received: host=127.0.0.1 port=35890
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO majors_courses(major_id, course_id) VALUES(54, 51)
[unknown] LOG:  connection received: host=127.0.0.1 port=35906
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35922
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Rhea','Kellems', 51, 2.5)
[unknown] LOG:  connection received: host=127.0.0.1 port=35934
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=35944
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Emma','Gilbert', null, null)
[unknown] LOG:  connection received: host=127.0.0.1 port=35948
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=35950
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Kimberly','Whitley', 52, 3.8)
[unknown] LOG:  connection received: host=127.0.0.1 port=35952
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=35968
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Jimmy','Felipe', 51, 3.7)
[unknown] LOG:  connection received: host=127.0.0.1 port=35972
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=35982
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Kyle','Stimson', null, 2.8)
[unknown] LOG:  connection received: host=127.0.0.1 port=35998
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36012
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Casares','Hijo', 56, 4.0)
[unknown] LOG:  connection received: host=127.0.0.1 port=36024
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36036
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Noe','Savage', null, 3.6)
[unknown] LOG:  connection received: host=127.0.0.1 port=36042
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36046
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Sterling','Boss', 56, 3.9)
[unknown] LOG:  connection received: host=127.0.0.1 port=36062
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36076
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Brian','Davis', null, 2.3)
[unknown] LOG:  connection received: host=127.0.0.1 port=36078
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36094
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Kaija','Uronen', 56, 3.7)
[unknown] LOG:  connection received: host=127.0.0.1 port=36096
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36100
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Faye','Conn', 56, 2.1)
[unknown] LOG:  connection received: host=127.0.0.1 port=36116
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=36122
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Efren','Reilly', 52, 3.9)
[unknown] LOG:  connection received: host=127.0.0.1 port=36124
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36132
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Danh','Nhung', null, 2.4)
[unknown] LOG:  connection received: host=127.0.0.1 port=36144
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=36152
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Maxine','Hagenes', 51, 2.9)
[unknown] LOG:  connection received: host=127.0.0.1 port=36156
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=36168
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Larry','Saunders', 53, 2.2)
[unknown] LOG:  connection received: host=127.0.0.1 port=36176
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=36178
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Karl','Kuhar', 52, null)
[unknown] LOG:  connection received: host=127.0.0.1 port=36192
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36196
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Lieke','Hazenveld', 56, 3.5)
[unknown] LOG:  connection received: host=127.0.0.1 port=36204
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=36216
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Obie','Hilpert', 52, null)
[unknown] LOG:  connection received: host=127.0.0.1 port=36228
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36240
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Peter','Booysen', null, 2.9)
[unknown] LOG:  connection received: host=127.0.0.1 port=36248
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=36256
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Nathan','Turner', 51, 3.3)
[unknown] LOG:  connection received: host=127.0.0.1 port=36272
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=36276
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Gerald','Osiki', 53, 2.2)
[unknown] LOG:  connection received: host=127.0.0.1 port=36284
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Game Design'
[unknown] LOG:  connection received: host=127.0.0.1 port=36300
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Vanya','Hassanah', 56, 4.0)
[unknown] LOG:  connection received: host=127.0.0.1 port=36302
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=36310
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Roxelana','Florescu', 51, 3.2)
[unknown] LOG:  connection received: host=127.0.0.1 port=36326
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=36330
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Helene','Parker', 53, 3.4)
[unknown] LOG:  connection received: host=127.0.0.1 port=36342
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=36346
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Mariana','Russel', 52, 1.8)
[unknown] LOG:  connection received: host=127.0.0.1 port=36358
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36368
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Ajit','Dhungel', null, 3.0)
[unknown] LOG:  connection received: host=127.0.0.1 port=36372
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Database Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=36374
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Mehdi','Vandenberghe', 51, 1.9)
[unknown] LOG:  connection received: host=127.0.0.1 port=36384
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Web Development'
[unknown] LOG:  connection received: host=127.0.0.1 port=36400
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Dejon','Howell', 52, 4.0)
[unknown] LOG:  connection received: host=127.0.0.1 port=36416
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='System Administration'
[unknown] LOG:  connection received: host=127.0.0.1 port=36424
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Aliya','Gulgowski', 57, 2.6)
[unknown] LOG:  connection received: host=127.0.0.1 port=36434
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='Data Science'
[unknown] LOG:  connection received: host=127.0.0.1 port=36448
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Ana','Tupajic', 53, 3.1)
[unknown] LOG:  connection received: host=127.0.0.1 port=36452
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT major_id FROM majors where major='null'
[unknown] LOG:  connection received: host=127.0.0.1 port=36468
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO students(first_name, last_name, major_id, gpa) VALUES('Hugo','Duran', null, 3.8)
[unknown] LOG:  connection received: host=::1 port=33826
postgres LOG:  connection authorized: user=postgres database=students
postgres LOG:  statement: SELECT major_id FROM majors
postgres LOG:  statement: SELECT course_id FROM courses
postgres LOG:  statement: SELECT major_id FROM majors_courses
postgres LOG:  statement: SELECT student_id FROM students
freecodecamp LOG:  statement: select * from students;
freecodecamp LOG:  statement: select * from majors;
freecodecamp LOG:  statement: select * from courses;
freecodecamp LOG:  statement: select * from majors_courses;
[unknown] LOG:  connection received: host=127.0.0.1 port=58294
freecodecamp LOG:  connection authorized: user=freecodecamp database=students application_name=pg_dump SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
freecodecamp LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()
freecodecamp LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
freecodecamp LOG:  statement: SET DATESTYLE = ISO
freecodecamp LOG:  statement: SET INTERVALSTYLE = POSTGRES
freecodecamp LOG:  statement: SET extra_float_digits TO 3
freecodecamp LOG:  statement: SET synchronize_seqscans TO off
freecodecamp LOG:  statement: SET statement_timeout = 0
freecodecamp LOG:  statement: SET lock_timeout = 0
freecodecamp LOG:  statement: SET idle_in_transaction_session_timeout = 0
freecodecamp LOG:  statement: SET row_security = off
freecodecamp LOG:  statement: BEGIN
freecodecamp LOG:  statement: SET TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ ONLY
freecodecamp LOG:  statement: SELECT x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition FROM pg_extension x JOIN pg_namespace n ON n.oid = x.extnamespace
freecodecamp LOG:  statement: SELECT classid, objid, refobjid FROM pg_depend WHERE refclassid = 'pg_extension'::regclass AND deptype = 'e' ORDER BY 3
freecodecamp LOG:  statement: SELECT n.tableoid, n.oid, n.nspname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = nspowner) AS rolname, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(n.nspacl,pg_catalog.acldefault('n',n.nspowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('n',n.nspowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) as nspacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('n',n.nspowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(n.nspacl,pg_catalog.acldefault('n',n.nspowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) as rnspacl, NULL as initnspacl, NULL as initrnspacl FROM pg_namespace n LEFT JOIN pg_init_privs pip ON (n.oid = pip.objoid AND pip.classoid = 'pg_namespace'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT c.tableoid, c.oid, c.relname, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(c.relacl,pg_catalog.acldefault(CASE WHEN c.relkind = 'S' THEN 's' ELSE 'r' END::"char",c.relowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault(CASE WHEN c.relkind = 'S' THEN 's' ELSE 'r' END::"char",c.relowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS relacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault(CASE WHEN c.relkind = 'S' THEN 's' ELSE 'r' END::"char",c.relowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(c.relacl,pg_catalog.acldefault(CASE WHEN c.relkind = 'S' THEN 's' ELSE 'r' END::"char",c.relowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) as rrelacl, NULL AS initrelacl, NULL as initrrelacl, c.relkind, c.relnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = c.relowner) AS rolname, c.relchecks, c.relhastriggers, c.relhasindex, c.relhasrules, 'f'::bool AS relhasoids, c.relrowsecurity, c.relforcerowsecurity, c.relfrozenxid, c.relminmxid, tc.oid AS toid, tc.relfrozenxid AS tfrozenxid, tc.relminmxid AS tminmxid, c.relpersistence, c.relispopulated, c.relreplident, c.relpages, am.amname, c.reloftype, d.refobjid AS owning_tab, d.refobjsubid AS owning_col, (SELECT spcname FROM pg_tablespace t WHERE t.oid = c.reltablespace) AS reltablespace, array_remove(array_remove(c.reloptions,'check_option=local'),'check_option=cascaded') AS reloptions, CASE WHEN 'check_option=local' = ANY (c.reloptions) THEN 'LOCAL'::text WHEN 'check_option=cascaded' = ANY (c.reloptions) THEN 'CASCADED'::text ELSE NULL END AS checkoption, tc.reloptions AS toast_reloptions, c.relkind = 'S' AND EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_class'::regclass AND objid = c.oid AND objsubid = 0 AND refclassid = 'pg_class'::regclass AND deptype = 'i') AS is_identity_sequence, EXISTS (SELECT 1 FROM pg_attribute at LEFT JOIN pg_init_privs pip ON (c.oid = pip.objoid AND pip.classoid = 'pg_class'::regclass AND pip.objsubid = at.attnum)WHERE at.attrelid = c.oid AND ((SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(at.attacl,pg_catalog.acldefault('c',c.relowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('c',c.relowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) IS NOT NULL OR (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('c',c.relowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(at.attacl,pg_catalog.acldefault('c',c.relowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) IS NOT NULL OR NULL IS NOT NULL OR NULL IS NOT NULL))AS changed_acl, c.relispartition AS ispartition FROM pg_class c LEFT JOIN pg_depend d ON (c.relkind = 'S' AND d.classid = c.tableoid AND d.objid = c.oid AND d.objsubid = 0 AND d.refclassid = c.tableoid AND d.deptype IN ('a', 'i')) LEFT JOIN pg_class tc ON (c.reltoastrelid = tc.oid AND c.relkind <> 'p') LEFT JOIN pg_am am ON (c.relam = am.oid) LEFT JOIN pg_init_privs pip ON (c.oid = pip.objoid AND pip.classoid = 'pg_class'::regclass AND pip.objsubid = 0) WHERE c.relkind in ('r', 'S', 'v', 'c', 'm', 'f', 'p') ORDER BY c.oid
freecodecamp LOG:  statement: LOCK TABLE public.courses IN ACCESS SHARE MODE
freecodecamp LOG:  statement: LOCK TABLE public.majors IN ACCESS SHARE MODE
freecodecamp LOG:  statement: LOCK TABLE public.majors_courses IN ACCESS SHARE MODE
freecodecamp LOG:  statement: LOCK TABLE public.students IN ACCESS SHARE MODE
freecodecamp LOG:  statement: SELECT p.tableoid, p.oid, p.proname, p.prolang, p.pronargs, p.proargtypes, p.prorettype, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(p.proacl,pg_catalog.acldefault('f',p.proowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('f',p.proowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS proacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('f',p.proowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(p.proacl,pg_catalog.acldefault('f',p.proowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rproacl, NULL AS initproacl, NULL AS initrproacl, p.pronamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = p.proowner) AS rolname FROM pg_proc p LEFT JOIN pg_init_privs pip ON (p.oid = pip.objoid AND pip.classoid = 'pg_proc'::regclass AND pip.objsubid = 0) WHERE p.prokind <> 'a'
	  AND NOT EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_proc'::regclass AND objid = p.oid AND deptype = 'i')
	  AND (
	  pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
	  OR EXISTS (SELECT 1 FROM pg_cast
	  WHERE pg_cast.oid > 16383 
	  AND p.oid = pg_cast.castfunc)
	  OR EXISTS (SELECT 1 FROM pg_transform
	  WHERE pg_transform.oid > 16383 AND 
	  (p.oid = pg_transform.trffromsql
	  OR p.oid = pg_transform.trftosql))
	  OR p.proacl IS DISTINCT FROM pip.initprivs)
freecodecamp LOG:  statement: SELECT t.tableoid, t.oid, t.typname, t.typnamespace, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(t.typacl,pg_catalog.acldefault('T',t.typowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('T',t.typowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS typacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('T',t.typowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(t.typacl,pg_catalog.acldefault('T',t.typowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rtypacl, NULL AS inittypacl, NULL AS initrtypacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = t.typowner) AS rolname, t.typelem, t.typrelid, CASE WHEN t.typrelid = 0 THEN ' '::"char" ELSE (SELECT relkind FROM pg_class WHERE oid = t.typrelid) END AS typrelkind, t.typtype, t.typisdefined, t.typname[0] = '_' AND t.typelem != 0 AND (SELECT typarray FROM pg_type te WHERE oid = t.typelem) = t.oid AS isarray FROM pg_type t LEFT JOIN pg_init_privs pip ON (t.oid = pip.objoid AND pip.classoid = 'pg_type'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT l.tableoid, l.oid, l.lanname, l.lanpltrusted, l.lanplcallfoid, l.laninline, l.lanvalidator, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(l.lanacl,pg_catalog.acldefault('l',l.lanowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('l',l.lanowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS lanacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('l',l.lanowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(l.lanacl,pg_catalog.acldefault('l',l.lanowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rlanacl, NULL AS initlanacl, NULL AS initrlanacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = l.lanowner) AS lanowner FROM pg_language l LEFT JOIN pg_init_privs pip ON (l.oid = pip.objoid AND pip.classoid = 'pg_language'::regclass AND pip.objsubid = 0) WHERE l.lanispl ORDER BY l.oid
freecodecamp LOG:  statement: SELECT p.tableoid, p.oid, p.proname AS aggname, p.pronamespace AS aggnamespace, p.pronargs, p.proargtypes, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = p.proowner) AS rolname, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(p.proacl,pg_catalog.acldefault('f',p.proowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('f',p.proowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS aggacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('f',p.proowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(p.proacl,pg_catalog.acldefault('f',p.proowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS raggacl, NULL AS initaggacl, NULL AS initraggacl FROM pg_proc p LEFT JOIN pg_init_privs pip ON (p.oid = pip.objoid AND pip.classoid = 'pg_proc'::regclass AND pip.objsubid = 0) WHERE p.prokind = 'a' AND (p.pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog') OR p.proacl IS DISTINCT FROM pip.initprivs)
freecodecamp LOG:  statement: SELECT tableoid, oid, oprname, oprnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = oprowner) AS rolname, oprkind, oprcode::oid AS oprcode FROM pg_operator
freecodecamp LOG:  statement: SELECT tableoid, oid, amname, amtype, amhandler::pg_catalog.regproc AS amhandler FROM pg_am
freecodecamp LOG:  statement: SELECT tableoid, oid, opcname, opcnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opcowner) AS rolname FROM pg_opclass
freecodecamp LOG:  statement: SELECT tableoid, oid, opfname, opfnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opfowner) AS rolname FROM pg_opfamily
freecodecamp LOG:  statement: SELECT tableoid, oid, prsname, prsnamespace, prsstart::oid, prstoken::oid, prsend::oid, prsheadline::oid, prslextype::oid FROM pg_ts_parser
freecodecamp LOG:  statement: SELECT tableoid, oid, tmplname, tmplnamespace, tmplinit::oid, tmpllexize::oid FROM pg_ts_template
freecodecamp LOG:  statement: SELECT tableoid, oid, dictname, dictnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = dictowner) AS rolname, dicttemplate, dictinitoption FROM pg_ts_dict
freecodecamp LOG:  statement: SELECT tableoid, oid, cfgname, cfgnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = cfgowner) AS rolname, cfgparser FROM pg_ts_config
freecodecamp LOG:  statement: SELECT f.tableoid, f.oid, f.fdwname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = f.fdwowner) AS rolname, f.fdwhandler::pg_catalog.regproc, f.fdwvalidator::pg_catalog.regproc, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(f.fdwacl,pg_catalog.acldefault('F',f.fdwowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('F',f.fdwowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS fdwacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('F',f.fdwowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(f.fdwacl,pg_catalog.acldefault('F',f.fdwowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rfdwacl, NULL AS initfdwacl, NULL AS initrfdwacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(f.fdwoptions) ORDER BY option_name), E',
	    ') AS fdwoptions FROM pg_foreign_data_wrapper f LEFT JOIN pg_init_privs pip ON (f.oid = pip.objoid AND pip.classoid = 'pg_foreign_data_wrapper'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT f.tableoid, f.oid, f.srvname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = f.srvowner) AS rolname, f.srvfdw, f.srvtype, f.srvversion, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(f.srvacl,pg_catalog.acldefault('S',f.srvowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('S',f.srvowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS srvacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('S',f.srvowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(f.srvacl,pg_catalog.acldefault('S',f.srvowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rsrvacl, NULL AS initsrvacl, NULL AS initrsrvacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(f.srvoptions) ORDER BY option_name), E',
	    ') AS srvoptions FROM pg_foreign_server f LEFT JOIN pg_init_privs pip ON (f.oid = pip.objoid AND pip.classoid = 'pg_foreign_server'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT d.oid, d.tableoid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = d.defaclrole) AS defaclrole, d.defaclnamespace, d.defaclobjtype, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(defaclacl,pg_catalog.acldefault(CASE WHEN defaclnamespace = 0 THEN	  CASE WHEN defaclobjtype = 'S' THEN 's'::"char"	  ELSE defaclobjtype END ELSE NULL END,defaclrole))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault(CASE WHEN defaclnamespace = 0 THEN	  CASE WHEN defaclobjtype = 'S' THEN 's'::"char"	  ELSE defaclobjtype END ELSE NULL END,defaclrole))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS defaclacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault(CASE WHEN defaclnamespace = 0 THEN	  CASE WHEN defaclobjtype = 'S' THEN 's'::"char"	  ELSE defaclobjtype END ELSE NULL END,defaclrole))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(defaclacl,pg_catalog.acldefault(CASE WHEN defaclnamespace = 0 THEN	  CASE WHEN defaclobjtype = 'S' THEN 's'::"char"	  ELSE defaclobjtype END ELSE NULL END,defaclrole))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rdefaclacl, NULL AS initdefaclacl, NULL AS initrdefaclacl FROM pg_default_acl d LEFT JOIN pg_init_privs pip ON (d.oid = pip.objoid AND pip.classoid = 'pg_default_acl'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT tableoid, oid, collname, collnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = collowner) AS rolname FROM pg_collation
freecodecamp LOG:  statement: SELECT tableoid, oid, conname, connamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = conowner) AS rolname FROM pg_conversion
freecodecamp LOG:  statement: SELECT tableoid, oid, castsource, casttarget, castfunc, castcontext, castmethod FROM pg_cast ORDER BY 3,4
freecodecamp LOG:  statement: SELECT tableoid, oid, trftype, trflang, trffromsql::oid, trftosql::oid FROM pg_transform ORDER BY 3,4
freecodecamp LOG:  statement: SELECT inhrelid, inhparent FROM pg_inherits
freecodecamp LOG:  statement: SELECT e.tableoid, e.oid, evtname, evtenabled, evtevent, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = evtowner) AS evtowner, array_to_string(array(select quote_literal(x)  from unnest(evttags) as t(x)), ', ') as evttags, e.evtfoid::regproc as evtfname FROM pg_event_trigger e ORDER BY e.oid
freecodecamp LOG:  statement: SELECT conrelid, confrelid FROM pg_constraint JOIN pg_depend ON (objid = confrelid) WHERE contype = 'f' AND refclassid = 'pg_extension'::regclass AND classid = 'pg_class'::regclass;
freecodecamp LOG:  statement: SELECT
	a.attnum,
	a.attname,
	a.atttypmod,
	a.attstattarget,
	a.attstorage,
	t.typstorage,
	a.attnotnull,
	a.atthasdef,
	a.attisdropped,
	a.attlen,
	a.attalign,
	a.attislocal,
	pg_catalog.format_type(t.oid, a.atttypmod) AS atttypname,
	a.attgenerated,
	CASE WHEN a.atthasmissing AND NOT a.attisdropped THEN a.attmissingval ELSE null END AS attmissingval,
	a.attidentity,
	pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
	    ') AS attfdwoptions,
	CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation,
	array_to_string(a.attoptions, ', ') AS attoptions
	FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid
	WHERE a.attrelid = '16521'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2
	ORDER BY a.attnum
freecodecamp LOG:  statement: SELECT tableoid, oid, adnum, pg_catalog.pg_get_expr(adbin, adrelid) AS adsrc FROM pg_catalog.pg_attrdef WHERE adrelid = '16521'::pg_catalog.oid
freecodecamp LOG:  statement: SELECT
	a.attnum,
	a.attname,
	a.atttypmod,
	a.attstattarget,
	a.attstorage,
	t.typstorage,
	a.attnotnull,
	a.atthasdef,
	a.attisdropped,
	a.attlen,
	a.attalign,
	a.attislocal,
	pg_catalog.format_type(t.oid, a.atttypmod) AS atttypname,
	a.attgenerated,
	CASE WHEN a.atthasmissing AND NOT a.attisdropped THEN a.attmissingval ELSE null END AS attmissingval,
	a.attidentity,
	pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
	    ') AS attfdwoptions,
	CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation,
	array_to_string(a.attoptions, ', ') AS attoptions
	FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid
	WHERE a.attrelid = '16526'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2
	ORDER BY a.attnum
freecodecamp LOG:  statement: SELECT tableoid, oid, adnum, pg_catalog.pg_get_expr(adbin, adrelid) AS adsrc FROM pg_catalog.pg_attrdef WHERE adrelid = '16526'::pg_catalog.oid
freecodecamp LOG:  statement: SELECT
	a.attnum,
	a.attname,
	a.atttypmod,
	a.attstattarget,
	a.attstorage,
	t.typstorage,
	a.attnotnull,
	a.atthasdef,
	a.attisdropped,
	a.attlen,
	a.attalign,
	a.attislocal,
	pg_catalog.format_type(t.oid, a.atttypmod) AS atttypname,
	a.attgenerated,
	CASE WHEN a.atthasmissing AND NOT a.attisdropped THEN a.attmissingval ELSE null END AS attmissingval,
	a.attidentity,
	pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
	    ') AS attfdwoptions,
	CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation,
	array_to_string(a.attoptions, ', ') AS attoptions
	FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid
	WHERE a.attrelid = '16529'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2
	ORDER BY a.attnum
freecodecamp LOG:  statement: SELECT
	a.attnum,
	a.attname,
	a.atttypmod,
	a.attstattarget,
	a.attstorage,
	t.typstorage,
	a.attnotnull,
	a.atthasdef,
	a.attisdropped,
	a.attlen,
	a.attalign,
	a.attislocal,
	pg_catalog.format_type(t.oid, a.atttypmod) AS atttypname,
	a.attgenerated,
	CASE WHEN a.atthasmissing AND NOT a.attisdropped THEN a.attmissingval ELSE null END AS attmissingval,
	a.attidentity,
	pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
	    ') AS attfdwoptions,
	CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation,
	array_to_string(a.attoptions, ', ') AS attoptions
	FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid
	WHERE a.attrelid = '16534'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2
	ORDER BY a.attnum
freecodecamp LOG:  statement: SELECT tableoid, oid, adnum, pg_catalog.pg_get_expr(adbin, adrelid) AS adsrc FROM pg_catalog.pg_attrdef WHERE adrelid = '16534'::pg_catalog.oid
freecodecamp LOG:  statement: SELECT partrelid FROM pg_partitioned_table WHERE
	(SELECT c.oid FROM pg_opclass c JOIN pg_am a ON c.opcmethod = a.oid
	WHERE opcname = 'enum_ops' AND opcnamespace = 'pg_catalog'::regnamespace AND amname = 'hash') = ANY(partclass)
freecodecamp LOG:  statement: SELECT t.tableoid, t.oid, t.relname AS indexname, inh.inhparent AS parentidx, pg_catalog.pg_get_indexdef(i.indexrelid) AS indexdef, i.indnkeyatts AS indnkeyatts, i.indnatts AS indnatts, i.indkey, i.indisclustered, i.indisreplident, c.contype, c.conname, c.condeferrable, c.condeferred, c.tableoid AS contableoid, c.oid AS conoid, pg_catalog.pg_get_constraintdef(c.oid, false) AS condef, (SELECT spcname FROM pg_catalog.pg_tablespace s WHERE s.oid = t.reltablespace) AS tablespace, t.reloptions AS indreloptions, (SELECT pg_catalog.array_agg(attnum ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatcols,(SELECT pg_catalog.array_agg(attstattarget ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatvals FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class t ON (t.oid = i.indexrelid) JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) LEFT JOIN pg_catalog.pg_constraint c ON (i.indrelid = c.conrelid AND i.indexrelid = c.conindid AND c.contype IN ('p','u','x')) LEFT JOIN pg_catalog.pg_inherits inh ON (inh.inhrelid = indexrelid) WHERE i.indrelid = '16521'::pg_catalog.oid AND (i.indisvalid OR t2.relkind = 'p') AND i.indisready ORDER BY indexname
freecodecamp LOG:  statement: SELECT t.tableoid, t.oid, t.relname AS indexname, inh.inhparent AS parentidx, pg_catalog.pg_get_indexdef(i.indexrelid) AS indexdef, i.indnkeyatts AS indnkeyatts, i.indnatts AS indnatts, i.indkey, i.indisclustered, i.indisreplident, c.contype, c.conname, c.condeferrable, c.condeferred, c.tableoid AS contableoid, c.oid AS conoid, pg_catalog.pg_get_constraintdef(c.oid, false) AS condef, (SELECT spcname FROM pg_catalog.pg_tablespace s WHERE s.oid = t.reltablespace) AS tablespace, t.reloptions AS indreloptions, (SELECT pg_catalog.array_agg(attnum ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatcols,(SELECT pg_catalog.array_agg(attstattarget ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatvals FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class t ON (t.oid = i.indexrelid) JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) LEFT JOIN pg_catalog.pg_constraint c ON (i.indrelid = c.conrelid AND i.indexrelid = c.conindid AND c.contype IN ('p','u','x')) LEFT JOIN pg_catalog.pg_inherits inh ON (inh.inhrelid = indexrelid) WHERE i.indrelid = '16526'::pg_catalog.oid AND (i.indisvalid OR t2.relkind = 'p') AND i.indisready ORDER BY indexname
freecodecamp LOG:  statement: SELECT t.tableoid, t.oid, t.relname AS indexname, inh.inhparent AS parentidx, pg_catalog.pg_get_indexdef(i.indexrelid) AS indexdef, i.indnkeyatts AS indnkeyatts, i.indnatts AS indnatts, i.indkey, i.indisclustered, i.indisreplident, c.contype, c.conname, c.condeferrable, c.condeferred, c.tableoid AS contableoid, c.oid AS conoid, pg_catalog.pg_get_constraintdef(c.oid, false) AS condef, (SELECT spcname FROM pg_catalog.pg_tablespace s WHERE s.oid = t.reltablespace) AS tablespace, t.reloptions AS indreloptions, (SELECT pg_catalog.array_agg(attnum ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatcols,(SELECT pg_catalog.array_agg(attstattarget ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatvals FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class t ON (t.oid = i.indexrelid) JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) LEFT JOIN pg_catalog.pg_constraint c ON (i.indrelid = c.conrelid AND i.indexrelid = c.conindid AND c.contype IN ('p','u','x')) LEFT JOIN pg_catalog.pg_inherits inh ON (inh.inhrelid = indexrelid) WHERE i.indrelid = '16529'::pg_catalog.oid AND (i.indisvalid OR t2.relkind = 'p') AND i.indisready ORDER BY indexname
freecodecamp LOG:  statement: SELECT t.tableoid, t.oid, t.relname AS indexname, inh.inhparent AS parentidx, pg_catalog.pg_get_indexdef(i.indexrelid) AS indexdef, i.indnkeyatts AS indnkeyatts, i.indnatts AS indnatts, i.indkey, i.indisclustered, i.indisreplident, c.contype, c.conname, c.condeferrable, c.condeferred, c.tableoid AS contableoid, c.oid AS conoid, pg_catalog.pg_get_constraintdef(c.oid, false) AS condef, (SELECT spcname FROM pg_catalog.pg_tablespace s WHERE s.oid = t.reltablespace) AS tablespace, t.reloptions AS indreloptions, (SELECT pg_catalog.array_agg(attnum ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatcols,(SELECT pg_catalog.array_agg(attstattarget ORDER BY attnum)   FROM pg_catalog.pg_attribute   WHERE attrelid = i.indexrelid AND     attstattarget >= 0) AS indstatvals FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class t ON (t.oid = i.indexrelid) JOIN pg_catalog.pg_class t2 ON (t2.oid = i.indrelid) LEFT JOIN pg_catalog.pg_constraint c ON (i.indrelid = c.conrelid AND i.indexrelid = c.conindid AND c.contype IN ('p','u','x')) LEFT JOIN pg_catalog.pg_inherits inh ON (inh.inhrelid = indexrelid) WHERE i.indrelid = '16534'::pg_catalog.oid AND (i.indisvalid OR t2.relkind = 'p') AND i.indisready ORDER BY indexname
freecodecamp LOG:  statement: SELECT tableoid, oid, stxname, stxnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = stxowner) AS rolname FROM pg_catalog.pg_statistic_ext
freecodecamp LOG:  statement: SELECT tableoid, oid, conname, confrelid, conindid, pg_catalog.pg_get_constraintdef(oid) AS condef FROM pg_catalog.pg_constraint WHERE conrelid = '16521'::pg_catalog.oid AND conparentid = 0 AND contype = 'f'
freecodecamp LOG:  statement: SELECT tableoid, oid, conname, confrelid, conindid, pg_catalog.pg_get_constraintdef(oid) AS condef FROM pg_catalog.pg_constraint WHERE conrelid = '16526'::pg_catalog.oid AND conparentid = 0 AND contype = 'f'
freecodecamp LOG:  statement: SELECT tableoid, oid, conname, confrelid, conindid, pg_catalog.pg_get_constraintdef(oid) AS condef FROM pg_catalog.pg_constraint WHERE conrelid = '16529'::pg_catalog.oid AND conparentid = 0 AND contype = 'f'
freecodecamp LOG:  statement: SELECT tableoid, oid, conname, confrelid, conindid, pg_catalog.pg_get_constraintdef(oid) AS condef FROM pg_catalog.pg_constraint WHERE conrelid = '16534'::pg_catalog.oid AND conparentid = 0 AND contype = 'f'
freecodecamp LOG:  statement: SELECT t.tgname, t.tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(t.oid, false) AS tgdef, t.tgenabled, t.tableoid, t.oid, t.tgisinternal FROM pg_catalog.pg_trigger t LEFT JOIN pg_catalog.pg_depend AS d ON  d.classid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.objid = t.oid LEFT JOIN pg_catalog.pg_trigger AS pt ON pt.oid = refobjid WHERE t.tgrelid = '16521'::pg_catalog.oid AND (NOT t.tgisinternal)
freecodecamp LOG:  statement: SELECT t.tgname, t.tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(t.oid, false) AS tgdef, t.tgenabled, t.tableoid, t.oid, t.tgisinternal FROM pg_catalog.pg_trigger t LEFT JOIN pg_catalog.pg_depend AS d ON  d.classid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.objid = t.oid LEFT JOIN pg_catalog.pg_trigger AS pt ON pt.oid = refobjid WHERE t.tgrelid = '16526'::pg_catalog.oid AND (NOT t.tgisinternal)
freecodecamp LOG:  statement: SELECT t.tgname, t.tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(t.oid, false) AS tgdef, t.tgenabled, t.tableoid, t.oid, t.tgisinternal FROM pg_catalog.pg_trigger t LEFT JOIN pg_catalog.pg_depend AS d ON  d.classid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.objid = t.oid LEFT JOIN pg_catalog.pg_trigger AS pt ON pt.oid = refobjid WHERE t.tgrelid = '16529'::pg_catalog.oid AND (NOT t.tgisinternal)
freecodecamp LOG:  statement: SELECT t.tgname, t.tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(t.oid, false) AS tgdef, t.tgenabled, t.tableoid, t.oid, t.tgisinternal FROM pg_catalog.pg_trigger t LEFT JOIN pg_catalog.pg_depend AS d ON  d.classid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass AND  d.objid = t.oid LEFT JOIN pg_catalog.pg_trigger AS pt ON pt.oid = refobjid WHERE t.tgrelid = '16534'::pg_catalog.oid AND (NOT t.tgisinternal)
freecodecamp LOG:  statement: SELECT tableoid, oid, rulename, ev_class AS ruletable, ev_type, is_instead, ev_enabled FROM pg_rewrite ORDER BY oid
freecodecamp LOG:  statement: SELECT pol.oid, pol.tableoid, pol.polrelid, pol.polname, pol.polcmd, pol.polpermissive, CASE WHEN pol.polroles = '{0}' THEN NULL ELSE    pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(rolname) from pg_catalog.pg_roles WHERE oid = ANY(pol.polroles)), ', ') END AS polroles, pg_catalog.pg_get_expr(pol.polqual, pol.polrelid) AS polqual, pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid) AS polwithcheck FROM unnest('{16521,16526,16529,16534}'::pg_catalog.oid[]) AS src(tbloid)
	JOIN pg_catalog.pg_policy pol ON (src.tbloid = pol.polrelid)
freecodecamp LOG:  statement: SELECT p.tableoid, p.oid, p.pubname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = p.pubowner) AS rolname, p.puballtables, p.pubinsert, p.pubupdate, p.pubdelete, p.pubtruncate FROM pg_publication p
freecodecamp LOG:  statement: SELECT tableoid, oid, prpubid, prrelid FROM pg_catalog.pg_publication_rel
freecodecamp LOG:  statement: SELECT count(*) FROM pg_subscription WHERE subdbid = (SELECT oid FROM pg_database                 WHERE datname = current_database())
freecodecamp LOG:  statement: WITH RECURSIVE w AS ( SELECT d1.objid, d2.refobjid, c2.relkind AS refrelkind FROM pg_depend d1 JOIN pg_class c1 ON c1.oid = d1.objid AND c1.relkind = 'm' JOIN pg_rewrite r1 ON r1.ev_class = d1.objid JOIN pg_depend d2 ON d2.classid = 'pg_rewrite'::regclass AND d2.objid = r1.oid AND d2.refobjid <> d1.objid JOIN pg_class c2 ON c2.oid = d2.refobjid AND c2.relkind IN ('m','v') WHERE d1.classid = 'pg_class'::regclass UNION SELECT w.objid, d3.refobjid, c3.relkind FROM w JOIN pg_rewrite r3 ON r3.ev_class = w.refobjid JOIN pg_depend d3 ON d3.classid = 'pg_rewrite'::regclass AND d3.objid = r3.oid AND d3.refobjid <> w.refobjid JOIN pg_class c3 ON c3.oid = d3.refobjid AND c3.relkind IN ('m','v') ) SELECT 'pg_class'::regclass::oid AS classid, objid, refobjid FROM w WHERE refrelkind = 'm'
freecodecamp LOG:  statement: SELECT l.oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = l.lomowner) AS rolname, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(l.lomacl,pg_catalog.acldefault('L',l.lomowner))) WITH ORDINALITY AS perm(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('L',l.lomowner))) AS init(init_acl) WHERE acl = init_acl)) as foo) AS lomacl, (SELECT pg_catalog.array_agg(acl ORDER BY row_n) FROM (SELECT acl, row_n FROM pg_catalog.unnest(coalesce(pip.initprivs,pg_catalog.acldefault('L',l.lomowner))) WITH ORDINALITY AS initp(acl,row_n) WHERE NOT EXISTS ( SELECT 1 FROM pg_catalog.unnest(coalesce(l.lomacl,pg_catalog.acldefault('L',l.lomowner))) AS permp(orig_acl) WHERE acl = orig_acl)) as foo) AS rlomacl, NULL AS initlomacl, NULL AS initrlomacl FROM pg_largeobject_metadata l LEFT JOIN pg_init_privs pip ON (l.oid = pip.objoid AND pip.classoid = 'pg_largeobject'::regclass AND pip.objsubid = 0) 
freecodecamp LOG:  statement: SELECT classid, objid, refclassid, refobjid, deptype FROM pg_depend WHERE deptype != 'p' AND deptype != 'e'
	UNION ALL
	SELECT 'pg_opfamily'::regclass AS classid, amopfamily AS objid, refclassid, refobjid, deptype FROM pg_depend d, pg_amop o WHERE deptype NOT IN ('p', 'e', 'i') AND classid = 'pg_amop'::regclass AND objid = o.oid AND NOT (refclassid = 'pg_opfamily'::regclass AND amopfamily = refobjid)
	UNION ALL
	SELECT 'pg_opfamily'::regclass AS classid, amprocfamily AS objid, refclassid, refobjid, deptype FROM pg_depend d, pg_amproc p WHERE deptype NOT IN ('p', 'e', 'i') AND classid = 'pg_amproc'::regclass AND objid = p.oid AND NOT (refclassid = 'pg_opfamily'::regclass AND amprocfamily = refobjid)
	ORDER BY 1,2
freecodecamp LOG:  statement: SELECT pg_catalog.current_schemas(false)
freecodecamp LOG:  statement: SELECT tableoid, oid, datname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = datdba) AS dba, pg_encoding_to_char(encoding) AS encoding, datcollate, datctype, datfrozenxid, datminmxid, (SELECT array_agg(acl ORDER BY row_n) FROM   (SELECT acl, row_n FROM      unnest(coalesce(datacl,acldefault('d',datdba)))      WITH ORDINALITY AS perm(acl,row_n)    WHERE NOT EXISTS (      SELECT 1      FROM unnest(acldefault('d',datdba))        AS init(init_acl)      WHERE acl = init_acl)) AS datacls)  AS datacl, (SELECT array_agg(acl ORDER BY row_n) FROM   (SELECT acl, row_n FROM      unnest(acldefault('d',datdba))      WITH ORDINALITY AS initp(acl,row_n)    WHERE NOT EXISTS (      SELECT 1      FROM unnest(coalesce(datacl,acldefault('d',datdba)))        AS permp(orig_acl)      WHERE acl = orig_acl)) AS rdatacls)  AS rdatacl, datistemplate, datconnlimit, (SELECT spcname FROM pg_tablespace t WHERE t.oid = dattablespace) AS tablespace, shobj_description(oid, 'pg_database') AS description FROM pg_database WHERE datname = current_database()
freecodecamp LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_catalog.pg_database'::pg_catalog.regclass AND objoid = '16520'
freecodecamp LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setrole = 0 AND setdatabase = '16520'::oid
freecodecamp LOG:  statement: SELECT rolname, unnest(setconfig) FROM pg_db_role_setting s, pg_roles r WHERE setrole = r.oid AND setdatabase = '16520'::oid
freecodecamp LOG:  statement: SELECT description, classoid, objoid, objsubid FROM pg_catalog.pg_description ORDER BY classoid, objoid, objsubid
freecodecamp LOG:  statement: SELECT label, provider, classoid, objoid, objsubid FROM pg_catalog.pg_seclabel ORDER BY classoid, objoid, objsubid
freecodecamp LOG:  statement: SELECT format_type(seqtypid, NULL), seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle FROM pg_catalog.pg_sequence WHERE seqrelid = '16524'::oid
freecodecamp LOG:  statement: SELECT format_type(seqtypid, NULL), seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle FROM pg_catalog.pg_sequence WHERE seqrelid = '16532'::oid
freecodecamp LOG:  statement: SELECT format_type(seqtypid, NULL), seqstart, seqincrement, seqmax, seqmin, seqcache, seqcycle FROM pg_catalog.pg_sequence WHERE seqrelid = '16537'::oid
freecodecamp LOG:  statement: SELECT last_value, is_called FROM public.courses_course_id_seq
freecodecamp LOG:  statement: SELECT last_value, is_called FROM public.majors_major_id_seq
freecodecamp LOG:  statement: SELECT last_value, is_called FROM public.students_student_id_seq
freecodecamp LOG:  statement: DECLARE _pg_dump_cursor CURSOR FOR SELECT course_id, course FROM ONLY public.courses
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: CLOSE _pg_dump_cursor
freecodecamp LOG:  statement: DECLARE _pg_dump_cursor CURSOR FOR SELECT major_id, major FROM ONLY public.majors
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: CLOSE _pg_dump_cursor
freecodecamp LOG:  statement: DECLARE _pg_dump_cursor CURSOR FOR SELECT major_id, course_id FROM ONLY public.majors_courses
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: CLOSE _pg_dump_cursor
freecodecamp LOG:  statement: DECLARE _pg_dump_cursor CURSOR FOR SELECT student_id, first_name, last_name, major_id, gpa FROM ONLY public.students
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: FETCH 100 FROM _pg_dump_cursor
freecodecamp LOG:  statement: CLOSE _pg_dump_cursor
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 2449) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
