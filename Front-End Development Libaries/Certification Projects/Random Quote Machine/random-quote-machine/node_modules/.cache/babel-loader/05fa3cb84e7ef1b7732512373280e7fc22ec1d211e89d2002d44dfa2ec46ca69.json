{"ast":null,"code":"var _jsxFileName = \"D:\\\\Academics\\\\OneDrive - Carleton University\\\\Non-Academic\\\\Personal Projects\\\\freeCodeCamp\\\\Front-End Development Libaries\\\\Certification Projects\\\\Random Quote Machine\\\\random-quote-machine\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.scss\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./custom.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport { colorArray } from \"./colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet quotesDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\nfunction App() {\n  _s();\n  const [quoteArray, setQuoteArray] = useState(null);\n  const fetchQuotes = async url => {\n    //fetches and parses data from url\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuoteArray(parsedJSON.quotes);\n  };\n  useEffect(() => {\n    //Called after page loads\n    fetchQuotes(quotesDBUrl);\n  }, [quotesDBUrl]);\n  const randomizer = array => {\n    //Returns random elements from array passed into it\n    return array[Math.floor(Math.random() * array.length)];\n  };\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [color, setColor] = useState(randomizer(colorArray));\n  const handleChange = () => {\n    let randomColor = randomizer(colorArray);\n    setColor(randomColor);\n    let randomQuote = randomizer(quoteArray);\n    setQuote(randomQuote.quote);\n    setAuthor(randomQuote.author);\n  };\n  useEffect(() => {\n    //Displays a random quote once page loads\n    if (quoteArray) {\n      handleChange();\n    }\n  }, [quoteArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      style: {\n        backgroundColor: `${color}`,\n        color: `${color}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"wrapper\", {\n        id: \"quote-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"text\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-quote-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), quote]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"author\",\n          children: [\"- \", author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            id: \"tweet-quote\",\n            href: encodeURI(`http://www.twitter.com/intent/tweet?text=\"${quote}\" \\n\\n - ${author}`),\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              id: \"tweet-button\",\n              style: {\n                backgroundColor: `${color}`\n              },\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-twitter\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"new-quote\",\n            onClick: handleChange,\n            style: {\n              backgroundColor: `${color}`\n            },\n            children: \"New quote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"credits\",\n        children: \"By Mumtahin Farabi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LtHxjR85JZExqRCu5XcaVlchSA0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Button","React","useState","useEffect","colorArray","quotesDBUrl","App","quoteArray","setQuoteArray","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","randomizer","array","Math","floor","random","length","quote","setQuote","author","setAuthor","color","setColor","handleChange","randomColor","randomQuote","backgroundColor","encodeURI"],"sources":["D:/Academics/OneDrive - Carleton University/Non-Academic/Personal Projects/freeCodeCamp/Front-End Development Libaries/Certification Projects/Random Quote Machine/random-quote-machine/src/App.js"],"sourcesContent":["import \"./App.scss\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./custom.scss\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { colorArray } from \"./colors\";\r\n\r\nlet quotesDBUrl =\r\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\nfunction App() {\r\n  const [quoteArray, setQuoteArray] = useState(null);\r\n\r\n  const fetchQuotes = async (url) => {\r\n    //fetches and parses data from url\r\n    const response = await fetch(url);\r\n    const parsedJSON = await response.json();\r\n    setQuoteArray(parsedJSON.quotes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Called after page loads\r\n    fetchQuotes(quotesDBUrl);\r\n  }, [quotesDBUrl]);\r\n\r\n  const randomizer = (array) => {\r\n    //Returns random elements from array passed into it\r\n    return array[Math.floor(Math.random() * array.length)];\r\n  };\r\n\r\n  const [quote, setQuote] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const [color, setColor] = useState(randomizer(colorArray));\r\n\r\n  const handleChange = () => {\r\n    let randomColor = randomizer(colorArray);\r\n    setColor(randomColor);\r\n\r\n    let randomQuote = randomizer(quoteArray);\r\n    setQuote(randomQuote.quote);\r\n    setAuthor(randomQuote.author);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Displays a random quote once page loads\r\n    if (quoteArray) {\r\n      handleChange();\r\n    }\r\n  }, [quoteArray]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header\r\n        className=\"App-header\"\r\n        style={{ backgroundColor: `${color}`, color: `${color}` }}\r\n      >\r\n        <wrapper id=\"quote-box\">\r\n          <p id=\"text\">\r\n            <i className=\"fa fa-quote-left\"></i>\r\n            <span> </span>\r\n            {quote}\r\n          </p>\r\n          <p id=\"author\">- {author}</p>\r\n          <div className=\"buttons\">\r\n            <a\r\n              id=\"tweet-quote\"\r\n              href={encodeURI(\r\n                `http://www.twitter.com/intent/tweet?text=\"${quote}\" \\n\\n - ${author}`\r\n              )}\r\n            >\r\n              <Button id=\"tweet-button\" style={{ backgroundColor: `${color}` }}>\r\n                <i className=\"fa fa-twitter\"></i>\r\n              </Button>\r\n            </a>\r\n            <Button\r\n              id=\"new-quote\"\r\n              onClick={handleChange}\r\n              style={{ backgroundColor: `${color}` }}\r\n            >\r\n              New quote\r\n            </Button>\r\n          </div>\r\n        </wrapper>\r\n        <p className=\"credits\">By Mumtahin Farabi</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}